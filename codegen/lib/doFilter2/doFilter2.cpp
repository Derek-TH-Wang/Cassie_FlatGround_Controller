//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: doFilter2.cpp
//
// MATLAB Coder version            : 3.4
// C/C++ source code generated on  : 28-May-2019 16:42:10
//

// Include Files
#include "rt_nonfinite.h"
#include "doFilter2.h"
#include "doFilter2_data.h"

// Function Definitions

//
// DOFILTER Filters input x and returns output y.
// Arguments    : const double x[100]
//                double y[100]
// Return Type  : void
//
void doFilter2(const double x[100], double y[100])
{
  dsp_BiquadFilter_0 *obj;
  int ioIdx;
  int k;
  int memOffset;
  double stageIn;
  double numAccum;

  //  MATLAB Code
  //  Generated by MATLAB(R) 9.3 and DSP System Toolbox 9.5.
  //  Generated on: 28-May-2019 11:23:45
  //  To generate C/C++ code from this function use the codegen command.
  //  Type 'help codegen' for more information.
  obj = &Hd.cSFunObject;

  // System object Outputs function: dsp.BiquadFilter
  ioIdx = 0;
  for (k = 0; k < 100; k++) {
    memOffset = k << 4;
    stageIn = obj->P3_RTP3COEFF[0U] * x[ioIdx];
    stageIn -= obj->P2_RTP2COEFF[0] * obj->W0_FILT_STATES[memOffset];
    stageIn -= obj->P2_RTP2COEFF[1] * obj->W0_FILT_STATES[memOffset + 1];
    numAccum = obj->P1_RTP1COEFF[0] * stageIn;
    numAccum += obj->P1_RTP1COEFF[1] * obj->W0_FILT_STATES[memOffset];
    numAccum += obj->P1_RTP1COEFF[2] * obj->W0_FILT_STATES[memOffset + 1];
    obj->W0_FILT_STATES[memOffset + 1] = obj->W0_FILT_STATES[memOffset];
    obj->W0_FILT_STATES[memOffset] = stageIn;
    stageIn = obj->P3_RTP3COEFF[1U] * numAccum;
    stageIn -= obj->P2_RTP2COEFF[2] * obj->W0_FILT_STATES[memOffset + 2];
    stageIn -= obj->P2_RTP2COEFF[3] * obj->W0_FILT_STATES[memOffset + 3];
    numAccum = obj->P1_RTP1COEFF[3] * stageIn;
    numAccum += obj->P1_RTP1COEFF[4] * obj->W0_FILT_STATES[memOffset + 2];
    numAccum += obj->P1_RTP1COEFF[5] * obj->W0_FILT_STATES[memOffset + 3];
    obj->W0_FILT_STATES[memOffset + 3] = obj->W0_FILT_STATES[memOffset + 2];
    obj->W0_FILT_STATES[memOffset + 2] = stageIn;
    stageIn = obj->P3_RTP3COEFF[2U] * numAccum;
    stageIn -= obj->P2_RTP2COEFF[4] * obj->W0_FILT_STATES[memOffset + 4];
    stageIn -= obj->P2_RTP2COEFF[5] * obj->W0_FILT_STATES[memOffset + 5];
    numAccum = obj->P1_RTP1COEFF[6] * stageIn;
    numAccum += obj->P1_RTP1COEFF[7] * obj->W0_FILT_STATES[memOffset + 4];
    numAccum += obj->P1_RTP1COEFF[8] * obj->W0_FILT_STATES[memOffset + 5];
    obj->W0_FILT_STATES[memOffset + 5] = obj->W0_FILT_STATES[memOffset + 4];
    obj->W0_FILT_STATES[memOffset + 4] = stageIn;
    stageIn = obj->P3_RTP3COEFF[3U] * numAccum;
    stageIn -= obj->P2_RTP2COEFF[6] * obj->W0_FILT_STATES[memOffset + 6];
    stageIn -= obj->P2_RTP2COEFF[7] * obj->W0_FILT_STATES[memOffset + 7];
    numAccum = obj->P1_RTP1COEFF[9] * stageIn;
    numAccum += obj->P1_RTP1COEFF[10] * obj->W0_FILT_STATES[memOffset + 6];
    numAccum += obj->P1_RTP1COEFF[11] * obj->W0_FILT_STATES[memOffset + 7];
    obj->W0_FILT_STATES[memOffset + 7] = obj->W0_FILT_STATES[memOffset + 6];
    obj->W0_FILT_STATES[memOffset + 6] = stageIn;
    stageIn = obj->P3_RTP3COEFF[4U] * numAccum;
    stageIn -= obj->P2_RTP2COEFF[8] * obj->W0_FILT_STATES[memOffset + 8];
    stageIn -= obj->P2_RTP2COEFF[9] * obj->W0_FILT_STATES[memOffset + 9];
    numAccum = obj->P1_RTP1COEFF[12] * stageIn;
    numAccum += obj->P1_RTP1COEFF[13] * obj->W0_FILT_STATES[memOffset + 8];
    numAccum += obj->P1_RTP1COEFF[14] * obj->W0_FILT_STATES[memOffset + 9];
    obj->W0_FILT_STATES[memOffset + 9] = obj->W0_FILT_STATES[memOffset + 8];
    obj->W0_FILT_STATES[memOffset + 8] = stageIn;
    stageIn = obj->P3_RTP3COEFF[5U] * numAccum;
    stageIn -= obj->P2_RTP2COEFF[10] * obj->W0_FILT_STATES[memOffset + 10];
    stageIn -= obj->P2_RTP2COEFF[11] * obj->W0_FILT_STATES[memOffset + 11];
    numAccum = obj->P1_RTP1COEFF[15] * stageIn;
    numAccum += obj->P1_RTP1COEFF[16] * obj->W0_FILT_STATES[memOffset + 10];
    numAccum += obj->P1_RTP1COEFF[17] * obj->W0_FILT_STATES[memOffset + 11];
    obj->W0_FILT_STATES[memOffset + 11] = obj->W0_FILT_STATES[memOffset + 10];
    obj->W0_FILT_STATES[memOffset + 10] = stageIn;
    stageIn = obj->P3_RTP3COEFF[6U] * numAccum;
    stageIn -= obj->P2_RTP2COEFF[12] * obj->W0_FILT_STATES[memOffset + 12];
    stageIn -= obj->P2_RTP2COEFF[13] * obj->W0_FILT_STATES[memOffset + 13];
    numAccum = obj->P1_RTP1COEFF[18] * stageIn;
    numAccum += obj->P1_RTP1COEFF[19] * obj->W0_FILT_STATES[memOffset + 12];
    numAccum += obj->P1_RTP1COEFF[20] * obj->W0_FILT_STATES[memOffset + 13];
    obj->W0_FILT_STATES[memOffset + 13] = obj->W0_FILT_STATES[memOffset + 12];
    obj->W0_FILT_STATES[memOffset + 12] = stageIn;
    stageIn = obj->P3_RTP3COEFF[7U] * numAccum;
    stageIn -= obj->P2_RTP2COEFF[14] * obj->W0_FILT_STATES[memOffset + 14];
    stageIn -= obj->P2_RTP2COEFF[15] * obj->W0_FILT_STATES[memOffset + 15];
    numAccum = obj->P1_RTP1COEFF[21] * stageIn;
    numAccum += obj->P1_RTP1COEFF[22] * obj->W0_FILT_STATES[memOffset + 14];
    numAccum += obj->P1_RTP1COEFF[23] * obj->W0_FILT_STATES[memOffset + 15];
    obj->W0_FILT_STATES[memOffset + 15] = obj->W0_FILT_STATES[memOffset + 14];
    obj->W0_FILT_STATES[memOffset + 14] = stageIn;
    y[ioIdx] = numAccum;
    ioIdx++;
  }
}

//
// File trailer for doFilter2.cpp
//
// [EOF]
//
